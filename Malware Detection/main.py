#!/usr/bin/python

"""
This script sniffs the interface, pulls the destination IP
address, and verifies if it is blacklisted using VirusTotal's
blacklist api. 

There are two modes: auto and manual. The former sniffs the interace
live while the latter parses a pcap file

Limitations: the api only allows for a limited number of requests
per minute
"""



from scapy.all import *
from sys import *
from subprocess import *
import socket
import optparse
import netifaces
from time import sleep
from auto1 import Millenium_Falcon
from auto1 import DeathStar

#This function connects to the alert console

def client(msg):

    client = socket.socket()
    client.connect(('localhost',12345))
    client.send(msg)

def main():
    
    parser = optparse.OptionParser("usage: %prog" + " -a [auto] -m [manual]")
    parser.add_option("-a","--auto",dest="auto",type="string",help="Default value is True")
    parser.add_option("-m","--manual",dest="manual",type="string",help="Type manual for analyzing a pcap file")
    (options,args) = parser.parse_args()
    auto = options.auto
    manual = options.manual
    
    if auto == None and manual == None:
        parser.error("[!] Must enter appropriate arguments")
        sys.exit()


    yoda = Millenium_Falcon('<api key>')
        
    subprocess.call(['gnome-terminal','-x','./tcp_server.py'])
    sleep(2)
    client("Hi Malware alert window, I am now keeping watch!")  


    if auto:
        
        try:
            print
            print "[*] Initializing sniffer now..."
            print
            sniff(filter="",iface='wlp2s0',count=12,prn=yoda.auto)
        except: 
            print "[!] Sniffer could not be initialized. Check configuration."
            sys.exit()
        else:
            time.sleep(1)
            yoda.report()
    
    if manual:
        
        darth_vader = DeathStar('<api key>')
        darth_vader.packets(manual)
        darth_vader.report()



main()









    



